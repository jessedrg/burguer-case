
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model StoreChanel
 * 
 */
export type StoreChanel = {
  platformStoreId: string
  createdAt: Date
  phone: string | null
  city: string | null
  priceLevel: string | null
  rating: number | null
  platformStoreName: string | null
  platformStoreDescription: string | null
  platformStoreAdress: string | null
  platformStoreUrl: string | null
  note: string | null
  requestToGoogleMaps: boolean | null
}

/**
 * Model Review
 * 
 */
export type Review = {
  id: number
  date: Date | null
  platformReviewId: string | null
  ratingValue: number | null
  review: string | null
  reviewerId: string | null
  reviewerAvatar: string | null
  reviewerFirstName: string | null
  reviewerLastName: string | null
  reviewerCount: number | null
  userId: string | null
  storeChanelPlatformStoreId: string | null
}

/**
 * Model Products
 * 
 */
export type Products = {
  id: number
  platformProductId: string
  storeName: string
  category: string
  name: string
  description: string
  imageUrl: string
  currency: string
  price: number
  discountedPrice: number
  productId: number
  storeChanelPlatformStoreId: string | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more StoreChanels
 * const storeChanels = await prisma.storeChanel.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more StoreChanels
   * const storeChanels = await prisma.storeChanel.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;


      /**
   * `prisma.storeChanel`: Exposes CRUD operations for the **StoreChanel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StoreChanels
    * const storeChanels = await prisma.storeChanel.findMany()
    * ```
    */
  get storeChanel(): Prisma.StoreChanelDelegate<GlobalReject>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<GlobalReject>;

  /**
   * `prisma.products`: Exposes CRUD operations for the **Products** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.products.findMany()
    * ```
    */
  get products(): Prisma.ProductsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.7.0
   * Query Engine version: 8746e055198f517658c08a0c426c7eec87f5a85f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    StoreChanel: 'StoreChanel',
    Review: 'Review',
    Products: 'Products'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StoreChanelCountOutputType
   */


  export type StoreChanelCountOutputType = {
    review: number
    Products: number
  }

  export type StoreChanelCountOutputTypeSelect = {
    review?: boolean
    Products?: boolean
  }

  export type StoreChanelCountOutputTypeGetPayload<
    S extends boolean | null | undefined | StoreChanelCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? StoreChanelCountOutputType
    : S extends undefined
    ? never
    : S extends StoreChanelCountOutputTypeArgs
    ?'include' extends U
    ? StoreChanelCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof StoreChanelCountOutputType ?StoreChanelCountOutputType [P]
  : 
     never
  } 
    : StoreChanelCountOutputType
  : StoreChanelCountOutputType




  // Custom InputTypes

  /**
   * StoreChanelCountOutputType without action
   */
  export type StoreChanelCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the StoreChanelCountOutputType
     * 
    **/
    select?: StoreChanelCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model StoreChanel
   */


  export type AggregateStoreChanel = {
    _count: StoreChanelCountAggregateOutputType | null
    _avg: StoreChanelAvgAggregateOutputType | null
    _sum: StoreChanelSumAggregateOutputType | null
    _min: StoreChanelMinAggregateOutputType | null
    _max: StoreChanelMaxAggregateOutputType | null
  }

  export type StoreChanelAvgAggregateOutputType = {
    rating: number | null
  }

  export type StoreChanelSumAggregateOutputType = {
    rating: number | null
  }

  export type StoreChanelMinAggregateOutputType = {
    platformStoreId: string | null
    createdAt: Date | null
    phone: string | null
    city: string | null
    priceLevel: string | null
    rating: number | null
    platformStoreName: string | null
    platformStoreDescription: string | null
    platformStoreAdress: string | null
    platformStoreUrl: string | null
    note: string | null
    requestToGoogleMaps: boolean | null
  }

  export type StoreChanelMaxAggregateOutputType = {
    platformStoreId: string | null
    createdAt: Date | null
    phone: string | null
    city: string | null
    priceLevel: string | null
    rating: number | null
    platformStoreName: string | null
    platformStoreDescription: string | null
    platformStoreAdress: string | null
    platformStoreUrl: string | null
    note: string | null
    requestToGoogleMaps: boolean | null
  }

  export type StoreChanelCountAggregateOutputType = {
    platformStoreId: number
    createdAt: number
    phone: number
    city: number
    priceLevel: number
    rating: number
    platformStoreName: number
    platformStoreDescription: number
    platformStoreAdress: number
    platformStoreUrl: number
    note: number
    requestToGoogleMaps: number
    _all: number
  }


  export type StoreChanelAvgAggregateInputType = {
    rating?: true
  }

  export type StoreChanelSumAggregateInputType = {
    rating?: true
  }

  export type StoreChanelMinAggregateInputType = {
    platformStoreId?: true
    createdAt?: true
    phone?: true
    city?: true
    priceLevel?: true
    rating?: true
    platformStoreName?: true
    platformStoreDescription?: true
    platformStoreAdress?: true
    platformStoreUrl?: true
    note?: true
    requestToGoogleMaps?: true
  }

  export type StoreChanelMaxAggregateInputType = {
    platformStoreId?: true
    createdAt?: true
    phone?: true
    city?: true
    priceLevel?: true
    rating?: true
    platformStoreName?: true
    platformStoreDescription?: true
    platformStoreAdress?: true
    platformStoreUrl?: true
    note?: true
    requestToGoogleMaps?: true
  }

  export type StoreChanelCountAggregateInputType = {
    platformStoreId?: true
    createdAt?: true
    phone?: true
    city?: true
    priceLevel?: true
    rating?: true
    platformStoreName?: true
    platformStoreDescription?: true
    platformStoreAdress?: true
    platformStoreUrl?: true
    note?: true
    requestToGoogleMaps?: true
    _all?: true
  }

  export type StoreChanelAggregateArgs = {
    /**
     * Filter which StoreChanel to aggregate.
     * 
    **/
    where?: StoreChanelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StoreChanels to fetch.
     * 
    **/
    orderBy?: Enumerable<StoreChanelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: StoreChanelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StoreChanels from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StoreChanels.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StoreChanels
    **/
    _count?: true | StoreChanelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StoreChanelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StoreChanelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StoreChanelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StoreChanelMaxAggregateInputType
  }

  export type GetStoreChanelAggregateType<T extends StoreChanelAggregateArgs> = {
        [P in keyof T & keyof AggregateStoreChanel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStoreChanel[P]>
      : GetScalarType<T[P], AggregateStoreChanel[P]>
  }




  export type StoreChanelGroupByArgs = {
    where?: StoreChanelWhereInput
    orderBy?: Enumerable<StoreChanelOrderByWithAggregationInput>
    by: Array<StoreChanelScalarFieldEnum>
    having?: StoreChanelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StoreChanelCountAggregateInputType | true
    _avg?: StoreChanelAvgAggregateInputType
    _sum?: StoreChanelSumAggregateInputType
    _min?: StoreChanelMinAggregateInputType
    _max?: StoreChanelMaxAggregateInputType
  }


  export type StoreChanelGroupByOutputType = {
    platformStoreId: string
    createdAt: Date
    phone: string | null
    city: string | null
    priceLevel: string | null
    rating: number | null
    platformStoreName: string | null
    platformStoreDescription: string | null
    platformStoreAdress: string | null
    platformStoreUrl: string | null
    note: string | null
    requestToGoogleMaps: boolean | null
    _count: StoreChanelCountAggregateOutputType | null
    _avg: StoreChanelAvgAggregateOutputType | null
    _sum: StoreChanelSumAggregateOutputType | null
    _min: StoreChanelMinAggregateOutputType | null
    _max: StoreChanelMaxAggregateOutputType | null
  }

  type GetStoreChanelGroupByPayload<T extends StoreChanelGroupByArgs> = Promise<
    Array<
      PickArray<StoreChanelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StoreChanelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StoreChanelGroupByOutputType[P]>
            : GetScalarType<T[P], StoreChanelGroupByOutputType[P]>
        }
      >
    >


  export type StoreChanelSelect = {
    platformStoreId?: boolean
    createdAt?: boolean
    phone?: boolean
    city?: boolean
    priceLevel?: boolean
    rating?: boolean
    platformStoreName?: boolean
    platformStoreDescription?: boolean
    platformStoreAdress?: boolean
    platformStoreUrl?: boolean
    note?: boolean
    requestToGoogleMaps?: boolean
    review?: boolean | ReviewFindManyArgs
    Products?: boolean | ProductsFindManyArgs
    _count?: boolean | StoreChanelCountOutputTypeArgs
  }

  export type StoreChanelInclude = {
    review?: boolean | ReviewFindManyArgs
    Products?: boolean | ProductsFindManyArgs
    _count?: boolean | StoreChanelCountOutputTypeArgs
  }

  export type StoreChanelGetPayload<
    S extends boolean | null | undefined | StoreChanelArgs,
    U = keyof S
      > = S extends true
        ? StoreChanel
    : S extends undefined
    ? never
    : S extends StoreChanelArgs | StoreChanelFindManyArgs
    ?'include' extends U
    ? StoreChanel  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'review'
        ? Array < ReviewGetPayload<S['include'][P]>>  :
        P extends 'Products'
        ? Array < ProductsGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? StoreChanelCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof StoreChanel ?StoreChanel [P]
  : 
          P extends 'review'
        ? Array < ReviewGetPayload<S['select'][P]>>  :
        P extends 'Products'
        ? Array < ProductsGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? StoreChanelCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : StoreChanel
  : StoreChanel


  type StoreChanelCountArgs = Merge<
    Omit<StoreChanelFindManyArgs, 'select' | 'include'> & {
      select?: StoreChanelCountAggregateInputType | true
    }
  >

  export interface StoreChanelDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one StoreChanel that matches the filter.
     * @param {StoreChanelFindUniqueArgs} args - Arguments to find a StoreChanel
     * @example
     * // Get one StoreChanel
     * const storeChanel = await prisma.storeChanel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StoreChanelFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StoreChanelFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'StoreChanel'> extends True ? CheckSelect<T, Prisma__StoreChanelClient<StoreChanel>, Prisma__StoreChanelClient<StoreChanelGetPayload<T>>> : CheckSelect<T, Prisma__StoreChanelClient<StoreChanel | null >, Prisma__StoreChanelClient<StoreChanelGetPayload<T> | null >>

    /**
     * Find the first StoreChanel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreChanelFindFirstArgs} args - Arguments to find a StoreChanel
     * @example
     * // Get one StoreChanel
     * const storeChanel = await prisma.storeChanel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StoreChanelFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StoreChanelFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'StoreChanel'> extends True ? CheckSelect<T, Prisma__StoreChanelClient<StoreChanel>, Prisma__StoreChanelClient<StoreChanelGetPayload<T>>> : CheckSelect<T, Prisma__StoreChanelClient<StoreChanel | null >, Prisma__StoreChanelClient<StoreChanelGetPayload<T> | null >>

    /**
     * Find zero or more StoreChanels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreChanelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StoreChanels
     * const storeChanels = await prisma.storeChanel.findMany()
     * 
     * // Get first 10 StoreChanels
     * const storeChanels = await prisma.storeChanel.findMany({ take: 10 })
     * 
     * // Only select the `platformStoreId`
     * const storeChanelWithPlatformStoreIdOnly = await prisma.storeChanel.findMany({ select: { platformStoreId: true } })
     * 
    **/
    findMany<T extends StoreChanelFindManyArgs>(
      args?: SelectSubset<T, StoreChanelFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<StoreChanel>>, PrismaPromise<Array<StoreChanelGetPayload<T>>>>

    /**
     * Create a StoreChanel.
     * @param {StoreChanelCreateArgs} args - Arguments to create a StoreChanel.
     * @example
     * // Create one StoreChanel
     * const StoreChanel = await prisma.storeChanel.create({
     *   data: {
     *     // ... data to create a StoreChanel
     *   }
     * })
     * 
    **/
    create<T extends StoreChanelCreateArgs>(
      args: SelectSubset<T, StoreChanelCreateArgs>
    ): CheckSelect<T, Prisma__StoreChanelClient<StoreChanel>, Prisma__StoreChanelClient<StoreChanelGetPayload<T>>>

    /**
     * Create many StoreChanels.
     *     @param {StoreChanelCreateManyArgs} args - Arguments to create many StoreChanels.
     *     @example
     *     // Create many StoreChanels
     *     const storeChanel = await prisma.storeChanel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StoreChanelCreateManyArgs>(
      args?: SelectSubset<T, StoreChanelCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a StoreChanel.
     * @param {StoreChanelDeleteArgs} args - Arguments to delete one StoreChanel.
     * @example
     * // Delete one StoreChanel
     * const StoreChanel = await prisma.storeChanel.delete({
     *   where: {
     *     // ... filter to delete one StoreChanel
     *   }
     * })
     * 
    **/
    delete<T extends StoreChanelDeleteArgs>(
      args: SelectSubset<T, StoreChanelDeleteArgs>
    ): CheckSelect<T, Prisma__StoreChanelClient<StoreChanel>, Prisma__StoreChanelClient<StoreChanelGetPayload<T>>>

    /**
     * Update one StoreChanel.
     * @param {StoreChanelUpdateArgs} args - Arguments to update one StoreChanel.
     * @example
     * // Update one StoreChanel
     * const storeChanel = await prisma.storeChanel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StoreChanelUpdateArgs>(
      args: SelectSubset<T, StoreChanelUpdateArgs>
    ): CheckSelect<T, Prisma__StoreChanelClient<StoreChanel>, Prisma__StoreChanelClient<StoreChanelGetPayload<T>>>

    /**
     * Delete zero or more StoreChanels.
     * @param {StoreChanelDeleteManyArgs} args - Arguments to filter StoreChanels to delete.
     * @example
     * // Delete a few StoreChanels
     * const { count } = await prisma.storeChanel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StoreChanelDeleteManyArgs>(
      args?: SelectSubset<T, StoreChanelDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more StoreChanels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreChanelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StoreChanels
     * const storeChanel = await prisma.storeChanel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StoreChanelUpdateManyArgs>(
      args: SelectSubset<T, StoreChanelUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one StoreChanel.
     * @param {StoreChanelUpsertArgs} args - Arguments to update or create a StoreChanel.
     * @example
     * // Update or create a StoreChanel
     * const storeChanel = await prisma.storeChanel.upsert({
     *   create: {
     *     // ... data to create a StoreChanel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StoreChanel we want to update
     *   }
     * })
    **/
    upsert<T extends StoreChanelUpsertArgs>(
      args: SelectSubset<T, StoreChanelUpsertArgs>
    ): CheckSelect<T, Prisma__StoreChanelClient<StoreChanel>, Prisma__StoreChanelClient<StoreChanelGetPayload<T>>>

    /**
     * Count the number of StoreChanels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreChanelCountArgs} args - Arguments to filter StoreChanels to count.
     * @example
     * // Count the number of StoreChanels
     * const count = await prisma.storeChanel.count({
     *   where: {
     *     // ... the filter for the StoreChanels we want to count
     *   }
     * })
    **/
    count<T extends StoreChanelCountArgs>(
      args?: Subset<T, StoreChanelCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StoreChanelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StoreChanel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreChanelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StoreChanelAggregateArgs>(args: Subset<T, StoreChanelAggregateArgs>): PrismaPromise<GetStoreChanelAggregateType<T>>

    /**
     * Group by StoreChanel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreChanelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StoreChanelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StoreChanelGroupByArgs['orderBy'] }
        : { orderBy?: StoreChanelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StoreChanelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStoreChanelGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for StoreChanel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StoreChanelClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    review<T extends ReviewFindManyArgs = {}>(args?: Subset<T, ReviewFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Review>>, PrismaPromise<Array<ReviewGetPayload<T>>>>;

    Products<T extends ProductsFindManyArgs = {}>(args?: Subset<T, ProductsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Products>>, PrismaPromise<Array<ProductsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * StoreChanel findUnique
   */
  export type StoreChanelFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the StoreChanel
     * 
    **/
    select?: StoreChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StoreChanelInclude | null
    /**
     * Throw an Error if a StoreChanel can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which StoreChanel to fetch.
     * 
    **/
    where: StoreChanelWhereUniqueInput
  }


  /**
   * StoreChanel findFirst
   */
  export type StoreChanelFindFirstArgs = {
    /**
     * Select specific fields to fetch from the StoreChanel
     * 
    **/
    select?: StoreChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StoreChanelInclude | null
    /**
     * Throw an Error if a StoreChanel can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which StoreChanel to fetch.
     * 
    **/
    where?: StoreChanelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StoreChanels to fetch.
     * 
    **/
    orderBy?: Enumerable<StoreChanelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StoreChanels.
     * 
    **/
    cursor?: StoreChanelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StoreChanels from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StoreChanels.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StoreChanels.
     * 
    **/
    distinct?: Enumerable<StoreChanelScalarFieldEnum>
  }


  /**
   * StoreChanel findMany
   */
  export type StoreChanelFindManyArgs = {
    /**
     * Select specific fields to fetch from the StoreChanel
     * 
    **/
    select?: StoreChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StoreChanelInclude | null
    /**
     * Filter, which StoreChanels to fetch.
     * 
    **/
    where?: StoreChanelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StoreChanels to fetch.
     * 
    **/
    orderBy?: Enumerable<StoreChanelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StoreChanels.
     * 
    **/
    cursor?: StoreChanelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StoreChanels from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StoreChanels.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StoreChanelScalarFieldEnum>
  }


  /**
   * StoreChanel create
   */
  export type StoreChanelCreateArgs = {
    /**
     * Select specific fields to fetch from the StoreChanel
     * 
    **/
    select?: StoreChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StoreChanelInclude | null
    /**
     * The data needed to create a StoreChanel.
     * 
    **/
    data: XOR<StoreChanelCreateInput, StoreChanelUncheckedCreateInput>
  }


  /**
   * StoreChanel createMany
   */
  export type StoreChanelCreateManyArgs = {
    data: Enumerable<StoreChanelCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * StoreChanel update
   */
  export type StoreChanelUpdateArgs = {
    /**
     * Select specific fields to fetch from the StoreChanel
     * 
    **/
    select?: StoreChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StoreChanelInclude | null
    /**
     * The data needed to update a StoreChanel.
     * 
    **/
    data: XOR<StoreChanelUpdateInput, StoreChanelUncheckedUpdateInput>
    /**
     * Choose, which StoreChanel to update.
     * 
    **/
    where: StoreChanelWhereUniqueInput
  }


  /**
   * StoreChanel updateMany
   */
  export type StoreChanelUpdateManyArgs = {
    data: XOR<StoreChanelUpdateManyMutationInput, StoreChanelUncheckedUpdateManyInput>
    where?: StoreChanelWhereInput
  }


  /**
   * StoreChanel upsert
   */
  export type StoreChanelUpsertArgs = {
    /**
     * Select specific fields to fetch from the StoreChanel
     * 
    **/
    select?: StoreChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StoreChanelInclude | null
    /**
     * The filter to search for the StoreChanel to update in case it exists.
     * 
    **/
    where: StoreChanelWhereUniqueInput
    /**
     * In case the StoreChanel found by the `where` argument doesn't exist, create a new StoreChanel with this data.
     * 
    **/
    create: XOR<StoreChanelCreateInput, StoreChanelUncheckedCreateInput>
    /**
     * In case the StoreChanel was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<StoreChanelUpdateInput, StoreChanelUncheckedUpdateInput>
  }


  /**
   * StoreChanel delete
   */
  export type StoreChanelDeleteArgs = {
    /**
     * Select specific fields to fetch from the StoreChanel
     * 
    **/
    select?: StoreChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StoreChanelInclude | null
    /**
     * Filter which StoreChanel to delete.
     * 
    **/
    where: StoreChanelWhereUniqueInput
  }


  /**
   * StoreChanel deleteMany
   */
  export type StoreChanelDeleteManyArgs = {
    where?: StoreChanelWhereInput
  }


  /**
   * StoreChanel without action
   */
  export type StoreChanelArgs = {
    /**
     * Select specific fields to fetch from the StoreChanel
     * 
    **/
    select?: StoreChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StoreChanelInclude | null
  }



  /**
   * Model Review
   */


  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    id: number | null
    ratingValue: number | null
    reviewerCount: number | null
  }

  export type ReviewSumAggregateOutputType = {
    id: number | null
    ratingValue: number | null
    reviewerCount: number | null
  }

  export type ReviewMinAggregateOutputType = {
    id: number | null
    date: Date | null
    platformReviewId: string | null
    ratingValue: number | null
    review: string | null
    reviewerId: string | null
    reviewerAvatar: string | null
    reviewerFirstName: string | null
    reviewerLastName: string | null
    reviewerCount: number | null
    userId: string | null
    storeChanelPlatformStoreId: string | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    platformReviewId: string | null
    ratingValue: number | null
    review: string | null
    reviewerId: string | null
    reviewerAvatar: string | null
    reviewerFirstName: string | null
    reviewerLastName: string | null
    reviewerCount: number | null
    userId: string | null
    storeChanelPlatformStoreId: string | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    date: number
    platformReviewId: number
    ratingValue: number
    review: number
    reviewerId: number
    reviewerAvatar: number
    reviewerFirstName: number
    reviewerLastName: number
    reviewerCount: number
    userId: number
    storeChanelPlatformStoreId: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    id?: true
    ratingValue?: true
    reviewerCount?: true
  }

  export type ReviewSumAggregateInputType = {
    id?: true
    ratingValue?: true
    reviewerCount?: true
  }

  export type ReviewMinAggregateInputType = {
    id?: true
    date?: true
    platformReviewId?: true
    ratingValue?: true
    review?: true
    reviewerId?: true
    reviewerAvatar?: true
    reviewerFirstName?: true
    reviewerLastName?: true
    reviewerCount?: true
    userId?: true
    storeChanelPlatformStoreId?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    date?: true
    platformReviewId?: true
    ratingValue?: true
    review?: true
    reviewerId?: true
    reviewerAvatar?: true
    reviewerFirstName?: true
    reviewerLastName?: true
    reviewerCount?: true
    userId?: true
    storeChanelPlatformStoreId?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    date?: true
    platformReviewId?: true
    ratingValue?: true
    review?: true
    reviewerId?: true
    reviewerAvatar?: true
    reviewerFirstName?: true
    reviewerLastName?: true
    reviewerCount?: true
    userId?: true
    storeChanelPlatformStoreId?: true
    _all?: true
  }

  export type ReviewAggregateArgs = {
    /**
     * Filter which Review to aggregate.
     * 
    **/
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     * 
    **/
    orderBy?: Enumerable<ReviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs = {
    where?: ReviewWhereInput
    orderBy?: Enumerable<ReviewOrderByWithAggregationInput>
    by: Array<ReviewScalarFieldEnum>
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }


  export type ReviewGroupByOutputType = {
    id: number
    date: Date | null
    platformReviewId: string | null
    ratingValue: number | null
    review: string | null
    reviewerId: string | null
    reviewerAvatar: string | null
    reviewerFirstName: string | null
    reviewerLastName: string | null
    reviewerCount: number | null
    userId: string | null
    storeChanelPlatformStoreId: string | null
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Promise<
    Array<
      PickArray<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect = {
    id?: boolean
    date?: boolean
    platformReviewId?: boolean
    ratingValue?: boolean
    review?: boolean
    reviewerId?: boolean
    reviewerAvatar?: boolean
    reviewerFirstName?: boolean
    reviewerLastName?: boolean
    reviewerCount?: boolean
    userId?: boolean
    StoreChanel?: boolean | StoreChanelArgs
    storeChanelPlatformStoreId?: boolean
  }

  export type ReviewInclude = {
    StoreChanel?: boolean | StoreChanelArgs
  }

  export type ReviewGetPayload<
    S extends boolean | null | undefined | ReviewArgs,
    U = keyof S
      > = S extends true
        ? Review
    : S extends undefined
    ? never
    : S extends ReviewArgs | ReviewFindManyArgs
    ?'include' extends U
    ? Review  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'StoreChanel'
        ? StoreChanelGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Review ?Review [P]
  : 
          P extends 'StoreChanel'
        ? StoreChanelGetPayload<S['select'][P]> | null : never
  } 
    : Review
  : Review


  type ReviewCountArgs = Merge<
    Omit<ReviewFindManyArgs, 'select' | 'include'> & {
      select?: ReviewCountAggregateInputType | true
    }
  >

  export interface ReviewDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReviewFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReviewFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Review'> extends True ? CheckSelect<T, Prisma__ReviewClient<Review>, Prisma__ReviewClient<ReviewGetPayload<T>>> : CheckSelect<T, Prisma__ReviewClient<Review | null >, Prisma__ReviewClient<ReviewGetPayload<T> | null >>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReviewFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReviewFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Review'> extends True ? CheckSelect<T, Prisma__ReviewClient<Review>, Prisma__ReviewClient<ReviewGetPayload<T>>> : CheckSelect<T, Prisma__ReviewClient<Review | null >, Prisma__ReviewClient<ReviewGetPayload<T> | null >>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReviewFindManyArgs>(
      args?: SelectSubset<T, ReviewFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Review>>, PrismaPromise<Array<ReviewGetPayload<T>>>>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
    **/
    create<T extends ReviewCreateArgs>(
      args: SelectSubset<T, ReviewCreateArgs>
    ): CheckSelect<T, Prisma__ReviewClient<Review>, Prisma__ReviewClient<ReviewGetPayload<T>>>

    /**
     * Create many Reviews.
     *     @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     *     @example
     *     // Create many Reviews
     *     const review = await prisma.review.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReviewCreateManyArgs>(
      args?: SelectSubset<T, ReviewCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
    **/
    delete<T extends ReviewDeleteArgs>(
      args: SelectSubset<T, ReviewDeleteArgs>
    ): CheckSelect<T, Prisma__ReviewClient<Review>, Prisma__ReviewClient<ReviewGetPayload<T>>>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReviewUpdateArgs>(
      args: SelectSubset<T, ReviewUpdateArgs>
    ): CheckSelect<T, Prisma__ReviewClient<Review>, Prisma__ReviewClient<ReviewGetPayload<T>>>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReviewDeleteManyArgs>(
      args?: SelectSubset<T, ReviewDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReviewUpdateManyArgs>(
      args: SelectSubset<T, ReviewUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
    **/
    upsert<T extends ReviewUpsertArgs>(
      args: SelectSubset<T, ReviewUpsertArgs>
    ): CheckSelect<T, Prisma__ReviewClient<Review>, Prisma__ReviewClient<ReviewGetPayload<T>>>

    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReviewClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    StoreChanel<T extends StoreChanelArgs = {}>(args?: Subset<T, StoreChanelArgs>): CheckSelect<T, Prisma__StoreChanelClient<StoreChanel | null >, Prisma__StoreChanelClient<StoreChanelGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Review findUnique
   */
  export type ReviewFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Review
     * 
    **/
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReviewInclude | null
    /**
     * Throw an Error if a Review can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Review to fetch.
     * 
    **/
    where: ReviewWhereUniqueInput
  }


  /**
   * Review findFirst
   */
  export type ReviewFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Review
     * 
    **/
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReviewInclude | null
    /**
     * Throw an Error if a Review can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Review to fetch.
     * 
    **/
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     * 
    **/
    orderBy?: Enumerable<ReviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     * 
    **/
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     * 
    **/
    distinct?: Enumerable<ReviewScalarFieldEnum>
  }


  /**
   * Review findMany
   */
  export type ReviewFindManyArgs = {
    /**
     * Select specific fields to fetch from the Review
     * 
    **/
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReviewInclude | null
    /**
     * Filter, which Reviews to fetch.
     * 
    **/
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     * 
    **/
    orderBy?: Enumerable<ReviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     * 
    **/
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ReviewScalarFieldEnum>
  }


  /**
   * Review create
   */
  export type ReviewCreateArgs = {
    /**
     * Select specific fields to fetch from the Review
     * 
    **/
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReviewInclude | null
    /**
     * The data needed to create a Review.
     * 
    **/
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }


  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs = {
    data: Enumerable<ReviewCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Review update
   */
  export type ReviewUpdateArgs = {
    /**
     * Select specific fields to fetch from the Review
     * 
    **/
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReviewInclude | null
    /**
     * The data needed to update a Review.
     * 
    **/
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     * 
    **/
    where: ReviewWhereUniqueInput
  }


  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs = {
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    where?: ReviewWhereInput
  }


  /**
   * Review upsert
   */
  export type ReviewUpsertArgs = {
    /**
     * Select specific fields to fetch from the Review
     * 
    **/
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReviewInclude | null
    /**
     * The filter to search for the Review to update in case it exists.
     * 
    **/
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     * 
    **/
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }


  /**
   * Review delete
   */
  export type ReviewDeleteArgs = {
    /**
     * Select specific fields to fetch from the Review
     * 
    **/
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReviewInclude | null
    /**
     * Filter which Review to delete.
     * 
    **/
    where: ReviewWhereUniqueInput
  }


  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs = {
    where?: ReviewWhereInput
  }


  /**
   * Review without action
   */
  export type ReviewArgs = {
    /**
     * Select specific fields to fetch from the Review
     * 
    **/
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReviewInclude | null
  }



  /**
   * Model Products
   */


  export type AggregateProducts = {
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  export type ProductsAvgAggregateOutputType = {
    id: number | null
    price: number | null
    discountedPrice: number | null
    productId: number | null
  }

  export type ProductsSumAggregateOutputType = {
    id: number | null
    price: number | null
    discountedPrice: number | null
    productId: number | null
  }

  export type ProductsMinAggregateOutputType = {
    id: number | null
    platformProductId: string | null
    storeName: string | null
    category: string | null
    name: string | null
    description: string | null
    imageUrl: string | null
    currency: string | null
    price: number | null
    discountedPrice: number | null
    productId: number | null
    storeChanelPlatformStoreId: string | null
  }

  export type ProductsMaxAggregateOutputType = {
    id: number | null
    platformProductId: string | null
    storeName: string | null
    category: string | null
    name: string | null
    description: string | null
    imageUrl: string | null
    currency: string | null
    price: number | null
    discountedPrice: number | null
    productId: number | null
    storeChanelPlatformStoreId: string | null
  }

  export type ProductsCountAggregateOutputType = {
    id: number
    platformProductId: number
    storeName: number
    category: number
    name: number
    description: number
    imageUrl: number
    currency: number
    price: number
    discountedPrice: number
    productId: number
    storeChanelPlatformStoreId: number
    _all: number
  }


  export type ProductsAvgAggregateInputType = {
    id?: true
    price?: true
    discountedPrice?: true
    productId?: true
  }

  export type ProductsSumAggregateInputType = {
    id?: true
    price?: true
    discountedPrice?: true
    productId?: true
  }

  export type ProductsMinAggregateInputType = {
    id?: true
    platformProductId?: true
    storeName?: true
    category?: true
    name?: true
    description?: true
    imageUrl?: true
    currency?: true
    price?: true
    discountedPrice?: true
    productId?: true
    storeChanelPlatformStoreId?: true
  }

  export type ProductsMaxAggregateInputType = {
    id?: true
    platformProductId?: true
    storeName?: true
    category?: true
    name?: true
    description?: true
    imageUrl?: true
    currency?: true
    price?: true
    discountedPrice?: true
    productId?: true
    storeChanelPlatformStoreId?: true
  }

  export type ProductsCountAggregateInputType = {
    id?: true
    platformProductId?: true
    storeName?: true
    category?: true
    name?: true
    description?: true
    imageUrl?: true
    currency?: true
    price?: true
    discountedPrice?: true
    productId?: true
    storeChanelPlatformStoreId?: true
    _all?: true
  }

  export type ProductsAggregateArgs = {
    /**
     * Filter which Products to aggregate.
     * 
    **/
    where?: ProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductsMaxAggregateInputType
  }

  export type GetProductsAggregateType<T extends ProductsAggregateArgs> = {
        [P in keyof T & keyof AggregateProducts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducts[P]>
      : GetScalarType<T[P], AggregateProducts[P]>
  }




  export type ProductsGroupByArgs = {
    where?: ProductsWhereInput
    orderBy?: Enumerable<ProductsOrderByWithAggregationInput>
    by: Array<ProductsScalarFieldEnum>
    having?: ProductsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductsCountAggregateInputType | true
    _avg?: ProductsAvgAggregateInputType
    _sum?: ProductsSumAggregateInputType
    _min?: ProductsMinAggregateInputType
    _max?: ProductsMaxAggregateInputType
  }


  export type ProductsGroupByOutputType = {
    id: number
    platformProductId: string
    storeName: string
    category: string
    name: string
    description: string
    imageUrl: string
    currency: string
    price: number
    discountedPrice: number
    productId: number
    storeChanelPlatformStoreId: string | null
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  type GetProductsGroupByPayload<T extends ProductsGroupByArgs> = Promise<
    Array<
      PickArray<ProductsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductsGroupByOutputType[P]>
            : GetScalarType<T[P], ProductsGroupByOutputType[P]>
        }
      >
    >


  export type ProductsSelect = {
    id?: boolean
    platformProductId?: boolean
    storeName?: boolean
    category?: boolean
    name?: boolean
    description?: boolean
    imageUrl?: boolean
    currency?: boolean
    price?: boolean
    discountedPrice?: boolean
    productId?: boolean
    StoreChanel?: boolean | StoreChanelArgs
    storeChanelPlatformStoreId?: boolean
  }

  export type ProductsInclude = {
    StoreChanel?: boolean | StoreChanelArgs
  }

  export type ProductsGetPayload<
    S extends boolean | null | undefined | ProductsArgs,
    U = keyof S
      > = S extends true
        ? Products
    : S extends undefined
    ? never
    : S extends ProductsArgs | ProductsFindManyArgs
    ?'include' extends U
    ? Products  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'StoreChanel'
        ? StoreChanelGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Products ?Products [P]
  : 
          P extends 'StoreChanel'
        ? StoreChanelGetPayload<S['select'][P]> | null : never
  } 
    : Products
  : Products


  type ProductsCountArgs = Merge<
    Omit<ProductsFindManyArgs, 'select' | 'include'> & {
      select?: ProductsCountAggregateInputType | true
    }
  >

  export interface ProductsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Products that matches the filter.
     * @param {ProductsFindUniqueArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProductsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Products'> extends True ? CheckSelect<T, Prisma__ProductsClient<Products>, Prisma__ProductsClient<ProductsGetPayload<T>>> : CheckSelect<T, Prisma__ProductsClient<Products | null >, Prisma__ProductsClient<ProductsGetPayload<T> | null >>

    /**
     * Find the first Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsFindFirstArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProductsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Products'> extends True ? CheckSelect<T, Prisma__ProductsClient<Products>, Prisma__ProductsClient<ProductsGetPayload<T>>> : CheckSelect<T, Prisma__ProductsClient<Products | null >, Prisma__ProductsClient<ProductsGetPayload<T> | null >>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.products.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.products.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productsWithIdOnly = await prisma.products.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductsFindManyArgs>(
      args?: SelectSubset<T, ProductsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Products>>, PrismaPromise<Array<ProductsGetPayload<T>>>>

    /**
     * Create a Products.
     * @param {ProductsCreateArgs} args - Arguments to create a Products.
     * @example
     * // Create one Products
     * const Products = await prisma.products.create({
     *   data: {
     *     // ... data to create a Products
     *   }
     * })
     * 
    **/
    create<T extends ProductsCreateArgs>(
      args: SelectSubset<T, ProductsCreateArgs>
    ): CheckSelect<T, Prisma__ProductsClient<Products>, Prisma__ProductsClient<ProductsGetPayload<T>>>

    /**
     * Create many Products.
     *     @param {ProductsCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const products = await prisma.products.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductsCreateManyArgs>(
      args?: SelectSubset<T, ProductsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Products.
     * @param {ProductsDeleteArgs} args - Arguments to delete one Products.
     * @example
     * // Delete one Products
     * const Products = await prisma.products.delete({
     *   where: {
     *     // ... filter to delete one Products
     *   }
     * })
     * 
    **/
    delete<T extends ProductsDeleteArgs>(
      args: SelectSubset<T, ProductsDeleteArgs>
    ): CheckSelect<T, Prisma__ProductsClient<Products>, Prisma__ProductsClient<ProductsGetPayload<T>>>

    /**
     * Update one Products.
     * @param {ProductsUpdateArgs} args - Arguments to update one Products.
     * @example
     * // Update one Products
     * const products = await prisma.products.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductsUpdateArgs>(
      args: SelectSubset<T, ProductsUpdateArgs>
    ): CheckSelect<T, Prisma__ProductsClient<Products>, Prisma__ProductsClient<ProductsGetPayload<T>>>

    /**
     * Delete zero or more Products.
     * @param {ProductsDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.products.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductsDeleteManyArgs>(
      args?: SelectSubset<T, ProductsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const products = await prisma.products.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductsUpdateManyArgs>(
      args: SelectSubset<T, ProductsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Products.
     * @param {ProductsUpsertArgs} args - Arguments to update or create a Products.
     * @example
     * // Update or create a Products
     * const products = await prisma.products.upsert({
     *   create: {
     *     // ... data to create a Products
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Products we want to update
     *   }
     * })
    **/
    upsert<T extends ProductsUpsertArgs>(
      args: SelectSubset<T, ProductsUpsertArgs>
    ): CheckSelect<T, Prisma__ProductsClient<Products>, Prisma__ProductsClient<ProductsGetPayload<T>>>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.products.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductsCountArgs>(
      args?: Subset<T, ProductsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductsAggregateArgs>(args: Subset<T, ProductsAggregateArgs>): PrismaPromise<GetProductsAggregateType<T>>

    /**
     * Group by Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductsGroupByArgs['orderBy'] }
        : { orderBy?: ProductsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Products.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProductsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    StoreChanel<T extends StoreChanelArgs = {}>(args?: Subset<T, StoreChanelArgs>): CheckSelect<T, Prisma__StoreChanelClient<StoreChanel | null >, Prisma__StoreChanelClient<StoreChanelGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Products findUnique
   */
  export type ProductsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Products
     * 
    **/
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsInclude | null
    /**
     * Throw an Error if a Products can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Products to fetch.
     * 
    **/
    where: ProductsWhereUniqueInput
  }


  /**
   * Products findFirst
   */
  export type ProductsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Products
     * 
    **/
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsInclude | null
    /**
     * Throw an Error if a Products can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Products to fetch.
     * 
    **/
    where?: ProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     * 
    **/
    cursor?: ProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     * 
    **/
    distinct?: Enumerable<ProductsScalarFieldEnum>
  }


  /**
   * Products findMany
   */
  export type ProductsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Products
     * 
    **/
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsInclude | null
    /**
     * Filter, which Products to fetch.
     * 
    **/
    where?: ProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     * 
    **/
    cursor?: ProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProductsScalarFieldEnum>
  }


  /**
   * Products create
   */
  export type ProductsCreateArgs = {
    /**
     * Select specific fields to fetch from the Products
     * 
    **/
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsInclude | null
    /**
     * The data needed to create a Products.
     * 
    **/
    data: XOR<ProductsCreateInput, ProductsUncheckedCreateInput>
  }


  /**
   * Products createMany
   */
  export type ProductsCreateManyArgs = {
    data: Enumerable<ProductsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Products update
   */
  export type ProductsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Products
     * 
    **/
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsInclude | null
    /**
     * The data needed to update a Products.
     * 
    **/
    data: XOR<ProductsUpdateInput, ProductsUncheckedUpdateInput>
    /**
     * Choose, which Products to update.
     * 
    **/
    where: ProductsWhereUniqueInput
  }


  /**
   * Products updateMany
   */
  export type ProductsUpdateManyArgs = {
    data: XOR<ProductsUpdateManyMutationInput, ProductsUncheckedUpdateManyInput>
    where?: ProductsWhereInput
  }


  /**
   * Products upsert
   */
  export type ProductsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Products
     * 
    **/
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsInclude | null
    /**
     * The filter to search for the Products to update in case it exists.
     * 
    **/
    where: ProductsWhereUniqueInput
    /**
     * In case the Products found by the `where` argument doesn't exist, create a new Products with this data.
     * 
    **/
    create: XOR<ProductsCreateInput, ProductsUncheckedCreateInput>
    /**
     * In case the Products was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProductsUpdateInput, ProductsUncheckedUpdateInput>
  }


  /**
   * Products delete
   */
  export type ProductsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Products
     * 
    **/
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsInclude | null
    /**
     * Filter which Products to delete.
     * 
    **/
    where: ProductsWhereUniqueInput
  }


  /**
   * Products deleteMany
   */
  export type ProductsDeleteManyArgs = {
    where?: ProductsWhereInput
  }


  /**
   * Products without action
   */
  export type ProductsArgs = {
    /**
     * Select specific fields to fetch from the Products
     * 
    **/
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const StoreChanelScalarFieldEnum: {
    platformStoreId: 'platformStoreId',
    createdAt: 'createdAt',
    phone: 'phone',
    city: 'city',
    priceLevel: 'priceLevel',
    rating: 'rating',
    platformStoreName: 'platformStoreName',
    platformStoreDescription: 'platformStoreDescription',
    platformStoreAdress: 'platformStoreAdress',
    platformStoreUrl: 'platformStoreUrl',
    note: 'note',
    requestToGoogleMaps: 'requestToGoogleMaps'
  };

  export type StoreChanelScalarFieldEnum = (typeof StoreChanelScalarFieldEnum)[keyof typeof StoreChanelScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    date: 'date',
    platformReviewId: 'platformReviewId',
    ratingValue: 'ratingValue',
    review: 'review',
    reviewerId: 'reviewerId',
    reviewerAvatar: 'reviewerAvatar',
    reviewerFirstName: 'reviewerFirstName',
    reviewerLastName: 'reviewerLastName',
    reviewerCount: 'reviewerCount',
    userId: 'userId',
    storeChanelPlatformStoreId: 'storeChanelPlatformStoreId'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const ProductsScalarFieldEnum: {
    id: 'id',
    platformProductId: 'platformProductId',
    storeName: 'storeName',
    category: 'category',
    name: 'name',
    description: 'description',
    imageUrl: 'imageUrl',
    currency: 'currency',
    price: 'price',
    discountedPrice: 'discountedPrice',
    productId: 'productId',
    storeChanelPlatformStoreId: 'storeChanelPlatformStoreId'
  };

  export type ProductsScalarFieldEnum = (typeof ProductsScalarFieldEnum)[keyof typeof ProductsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type StoreChanelWhereInput = {
    AND?: Enumerable<StoreChanelWhereInput>
    OR?: Enumerable<StoreChanelWhereInput>
    NOT?: Enumerable<StoreChanelWhereInput>
    platformStoreId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    phone?: StringNullableFilter | string | null
    city?: StringNullableFilter | string | null
    priceLevel?: StringNullableFilter | string | null
    rating?: FloatNullableFilter | number | null
    platformStoreName?: StringNullableFilter | string | null
    platformStoreDescription?: StringNullableFilter | string | null
    platformStoreAdress?: StringNullableFilter | string | null
    platformStoreUrl?: StringNullableFilter | string | null
    note?: StringNullableFilter | string | null
    requestToGoogleMaps?: BoolNullableFilter | boolean | null
    review?: ReviewListRelationFilter
    Products?: ProductsListRelationFilter
  }

  export type StoreChanelOrderByWithRelationInput = {
    platformStoreId?: SortOrder
    createdAt?: SortOrder
    phone?: SortOrder
    city?: SortOrder
    priceLevel?: SortOrder
    rating?: SortOrder
    platformStoreName?: SortOrder
    platformStoreDescription?: SortOrder
    platformStoreAdress?: SortOrder
    platformStoreUrl?: SortOrder
    note?: SortOrder
    requestToGoogleMaps?: SortOrder
    review?: ReviewOrderByRelationAggregateInput
    Products?: ProductsOrderByRelationAggregateInput
  }

  export type StoreChanelWhereUniqueInput = {
    platformStoreId?: string
  }

  export type StoreChanelOrderByWithAggregationInput = {
    platformStoreId?: SortOrder
    createdAt?: SortOrder
    phone?: SortOrder
    city?: SortOrder
    priceLevel?: SortOrder
    rating?: SortOrder
    platformStoreName?: SortOrder
    platformStoreDescription?: SortOrder
    platformStoreAdress?: SortOrder
    platformStoreUrl?: SortOrder
    note?: SortOrder
    requestToGoogleMaps?: SortOrder
    _count?: StoreChanelCountOrderByAggregateInput
    _avg?: StoreChanelAvgOrderByAggregateInput
    _max?: StoreChanelMaxOrderByAggregateInput
    _min?: StoreChanelMinOrderByAggregateInput
    _sum?: StoreChanelSumOrderByAggregateInput
  }

  export type StoreChanelScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StoreChanelScalarWhereWithAggregatesInput>
    OR?: Enumerable<StoreChanelScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StoreChanelScalarWhereWithAggregatesInput>
    platformStoreId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    phone?: StringNullableWithAggregatesFilter | string | null
    city?: StringNullableWithAggregatesFilter | string | null
    priceLevel?: StringNullableWithAggregatesFilter | string | null
    rating?: FloatNullableWithAggregatesFilter | number | null
    platformStoreName?: StringNullableWithAggregatesFilter | string | null
    platformStoreDescription?: StringNullableWithAggregatesFilter | string | null
    platformStoreAdress?: StringNullableWithAggregatesFilter | string | null
    platformStoreUrl?: StringNullableWithAggregatesFilter | string | null
    note?: StringNullableWithAggregatesFilter | string | null
    requestToGoogleMaps?: BoolNullableWithAggregatesFilter | boolean | null
  }

  export type ReviewWhereInput = {
    AND?: Enumerable<ReviewWhereInput>
    OR?: Enumerable<ReviewWhereInput>
    NOT?: Enumerable<ReviewWhereInput>
    id?: IntFilter | number
    date?: DateTimeNullableFilter | Date | string | null
    platformReviewId?: StringNullableFilter | string | null
    ratingValue?: FloatNullableFilter | number | null
    review?: StringNullableFilter | string | null
    reviewerId?: StringNullableFilter | string | null
    reviewerAvatar?: StringNullableFilter | string | null
    reviewerFirstName?: StringNullableFilter | string | null
    reviewerLastName?: StringNullableFilter | string | null
    reviewerCount?: IntNullableFilter | number | null
    userId?: StringNullableFilter | string | null
    StoreChanel?: XOR<StoreChanelRelationFilter, StoreChanelWhereInput> | null
    storeChanelPlatformStoreId?: StringNullableFilter | string | null
  }

  export type ReviewOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    platformReviewId?: SortOrder
    ratingValue?: SortOrder
    review?: SortOrder
    reviewerId?: SortOrder
    reviewerAvatar?: SortOrder
    reviewerFirstName?: SortOrder
    reviewerLastName?: SortOrder
    reviewerCount?: SortOrder
    userId?: SortOrder
    StoreChanel?: StoreChanelOrderByWithRelationInput
    storeChanelPlatformStoreId?: SortOrder
  }

  export type ReviewWhereUniqueInput = {
    id?: number
  }

  export type ReviewOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    platformReviewId?: SortOrder
    ratingValue?: SortOrder
    review?: SortOrder
    reviewerId?: SortOrder
    reviewerAvatar?: SortOrder
    reviewerFirstName?: SortOrder
    reviewerLastName?: SortOrder
    reviewerCount?: SortOrder
    userId?: SortOrder
    storeChanelPlatformStoreId?: SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _avg?: ReviewAvgOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
    _sum?: ReviewSumOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReviewScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReviewScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReviewScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    platformReviewId?: StringNullableWithAggregatesFilter | string | null
    ratingValue?: FloatNullableWithAggregatesFilter | number | null
    review?: StringNullableWithAggregatesFilter | string | null
    reviewerId?: StringNullableWithAggregatesFilter | string | null
    reviewerAvatar?: StringNullableWithAggregatesFilter | string | null
    reviewerFirstName?: StringNullableWithAggregatesFilter | string | null
    reviewerLastName?: StringNullableWithAggregatesFilter | string | null
    reviewerCount?: IntNullableWithAggregatesFilter | number | null
    userId?: StringNullableWithAggregatesFilter | string | null
    storeChanelPlatformStoreId?: StringNullableWithAggregatesFilter | string | null
  }

  export type ProductsWhereInput = {
    AND?: Enumerable<ProductsWhereInput>
    OR?: Enumerable<ProductsWhereInput>
    NOT?: Enumerable<ProductsWhereInput>
    id?: IntFilter | number
    platformProductId?: StringFilter | string
    storeName?: StringFilter | string
    category?: StringFilter | string
    name?: StringFilter | string
    description?: StringFilter | string
    imageUrl?: StringFilter | string
    currency?: StringFilter | string
    price?: IntFilter | number
    discountedPrice?: IntFilter | number
    productId?: IntFilter | number
    StoreChanel?: XOR<StoreChanelRelationFilter, StoreChanelWhereInput> | null
    storeChanelPlatformStoreId?: StringNullableFilter | string | null
  }

  export type ProductsOrderByWithRelationInput = {
    id?: SortOrder
    platformProductId?: SortOrder
    storeName?: SortOrder
    category?: SortOrder
    name?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    currency?: SortOrder
    price?: SortOrder
    discountedPrice?: SortOrder
    productId?: SortOrder
    StoreChanel?: StoreChanelOrderByWithRelationInput
    storeChanelPlatformStoreId?: SortOrder
  }

  export type ProductsWhereUniqueInput = {
    id?: number
  }

  export type ProductsOrderByWithAggregationInput = {
    id?: SortOrder
    platformProductId?: SortOrder
    storeName?: SortOrder
    category?: SortOrder
    name?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    currency?: SortOrder
    price?: SortOrder
    discountedPrice?: SortOrder
    productId?: SortOrder
    storeChanelPlatformStoreId?: SortOrder
    _count?: ProductsCountOrderByAggregateInput
    _avg?: ProductsAvgOrderByAggregateInput
    _max?: ProductsMaxOrderByAggregateInput
    _min?: ProductsMinOrderByAggregateInput
    _sum?: ProductsSumOrderByAggregateInput
  }

  export type ProductsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProductsScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProductsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProductsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    platformProductId?: StringWithAggregatesFilter | string
    storeName?: StringWithAggregatesFilter | string
    category?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    imageUrl?: StringWithAggregatesFilter | string
    currency?: StringWithAggregatesFilter | string
    price?: IntWithAggregatesFilter | number
    discountedPrice?: IntWithAggregatesFilter | number
    productId?: IntWithAggregatesFilter | number
    storeChanelPlatformStoreId?: StringNullableWithAggregatesFilter | string | null
  }

  export type StoreChanelCreateInput = {
    platformStoreId: string
    createdAt?: Date | string
    phone?: string | null
    city?: string | null
    priceLevel?: string | null
    rating?: number | null
    platformStoreName?: string | null
    platformStoreDescription?: string | null
    platformStoreAdress?: string | null
    platformStoreUrl?: string | null
    note?: string | null
    requestToGoogleMaps?: boolean | null
    review?: ReviewCreateNestedManyWithoutStoreChanelInput
    Products?: ProductsCreateNestedManyWithoutStoreChanelInput
  }

  export type StoreChanelUncheckedCreateInput = {
    platformStoreId: string
    createdAt?: Date | string
    phone?: string | null
    city?: string | null
    priceLevel?: string | null
    rating?: number | null
    platformStoreName?: string | null
    platformStoreDescription?: string | null
    platformStoreAdress?: string | null
    platformStoreUrl?: string | null
    note?: string | null
    requestToGoogleMaps?: boolean | null
    review?: ReviewUncheckedCreateNestedManyWithoutStoreChanelInput
    Products?: ProductsUncheckedCreateNestedManyWithoutStoreChanelInput
  }

  export type StoreChanelUpdateInput = {
    platformStoreId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    priceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    platformStoreName?: NullableStringFieldUpdateOperationsInput | string | null
    platformStoreDescription?: NullableStringFieldUpdateOperationsInput | string | null
    platformStoreAdress?: NullableStringFieldUpdateOperationsInput | string | null
    platformStoreUrl?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    requestToGoogleMaps?: NullableBoolFieldUpdateOperationsInput | boolean | null
    review?: ReviewUpdateManyWithoutStoreChanelInput
    Products?: ProductsUpdateManyWithoutStoreChanelInput
  }

  export type StoreChanelUncheckedUpdateInput = {
    platformStoreId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    priceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    platformStoreName?: NullableStringFieldUpdateOperationsInput | string | null
    platformStoreDescription?: NullableStringFieldUpdateOperationsInput | string | null
    platformStoreAdress?: NullableStringFieldUpdateOperationsInput | string | null
    platformStoreUrl?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    requestToGoogleMaps?: NullableBoolFieldUpdateOperationsInput | boolean | null
    review?: ReviewUncheckedUpdateManyWithoutStoreChanelInput
    Products?: ProductsUncheckedUpdateManyWithoutStoreChanelInput
  }

  export type StoreChanelCreateManyInput = {
    platformStoreId: string
    createdAt?: Date | string
    phone?: string | null
    city?: string | null
    priceLevel?: string | null
    rating?: number | null
    platformStoreName?: string | null
    platformStoreDescription?: string | null
    platformStoreAdress?: string | null
    platformStoreUrl?: string | null
    note?: string | null
    requestToGoogleMaps?: boolean | null
  }

  export type StoreChanelUpdateManyMutationInput = {
    platformStoreId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    priceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    platformStoreName?: NullableStringFieldUpdateOperationsInput | string | null
    platformStoreDescription?: NullableStringFieldUpdateOperationsInput | string | null
    platformStoreAdress?: NullableStringFieldUpdateOperationsInput | string | null
    platformStoreUrl?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    requestToGoogleMaps?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type StoreChanelUncheckedUpdateManyInput = {
    platformStoreId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    priceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    platformStoreName?: NullableStringFieldUpdateOperationsInput | string | null
    platformStoreDescription?: NullableStringFieldUpdateOperationsInput | string | null
    platformStoreAdress?: NullableStringFieldUpdateOperationsInput | string | null
    platformStoreUrl?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    requestToGoogleMaps?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ReviewCreateInput = {
    date?: Date | string | null
    platformReviewId?: string | null
    ratingValue?: number | null
    review?: string | null
    reviewerId?: string | null
    reviewerAvatar?: string | null
    reviewerFirstName?: string | null
    reviewerLastName?: string | null
    reviewerCount?: number | null
    userId?: string | null
    StoreChanel?: StoreChanelCreateNestedOneWithoutReviewInput
  }

  export type ReviewUncheckedCreateInput = {
    id?: number
    date?: Date | string | null
    platformReviewId?: string | null
    ratingValue?: number | null
    review?: string | null
    reviewerId?: string | null
    reviewerAvatar?: string | null
    reviewerFirstName?: string | null
    reviewerLastName?: string | null
    reviewerCount?: number | null
    userId?: string | null
    storeChanelPlatformStoreId?: string | null
  }

  export type ReviewUpdateInput = {
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platformReviewId?: NullableStringFieldUpdateOperationsInput | string | null
    ratingValue?: NullableFloatFieldUpdateOperationsInput | number | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerFirstName?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerLastName?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerCount?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    StoreChanel?: StoreChanelUpdateOneWithoutReviewInput
  }

  export type ReviewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platformReviewId?: NullableStringFieldUpdateOperationsInput | string | null
    ratingValue?: NullableFloatFieldUpdateOperationsInput | number | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerFirstName?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerLastName?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerCount?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    storeChanelPlatformStoreId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewCreateManyInput = {
    id?: number
    date?: Date | string | null
    platformReviewId?: string | null
    ratingValue?: number | null
    review?: string | null
    reviewerId?: string | null
    reviewerAvatar?: string | null
    reviewerFirstName?: string | null
    reviewerLastName?: string | null
    reviewerCount?: number | null
    userId?: string | null
    storeChanelPlatformStoreId?: string | null
  }

  export type ReviewUpdateManyMutationInput = {
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platformReviewId?: NullableStringFieldUpdateOperationsInput | string | null
    ratingValue?: NullableFloatFieldUpdateOperationsInput | number | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerFirstName?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerLastName?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerCount?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platformReviewId?: NullableStringFieldUpdateOperationsInput | string | null
    ratingValue?: NullableFloatFieldUpdateOperationsInput | number | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerFirstName?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerLastName?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerCount?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    storeChanelPlatformStoreId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductsCreateInput = {
    platformProductId: string
    storeName: string
    category: string
    name: string
    description: string
    imageUrl: string
    currency: string
    price: number
    discountedPrice: number
    productId: number
    StoreChanel?: StoreChanelCreateNestedOneWithoutProductsInput
  }

  export type ProductsUncheckedCreateInput = {
    id?: number
    platformProductId: string
    storeName: string
    category: string
    name: string
    description: string
    imageUrl: string
    currency: string
    price: number
    discountedPrice: number
    productId: number
    storeChanelPlatformStoreId?: string | null
  }

  export type ProductsUpdateInput = {
    platformProductId?: StringFieldUpdateOperationsInput | string
    storeName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    discountedPrice?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    StoreChanel?: StoreChanelUpdateOneWithoutProductsInput
  }

  export type ProductsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    platformProductId?: StringFieldUpdateOperationsInput | string
    storeName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    discountedPrice?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    storeChanelPlatformStoreId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductsCreateManyInput = {
    id?: number
    platformProductId: string
    storeName: string
    category: string
    name: string
    description: string
    imageUrl: string
    currency: string
    price: number
    discountedPrice: number
    productId: number
    storeChanelPlatformStoreId?: string | null
  }

  export type ProductsUpdateManyMutationInput = {
    platformProductId?: StringFieldUpdateOperationsInput | string
    storeName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    discountedPrice?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
  }

  export type ProductsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    platformProductId?: StringFieldUpdateOperationsInput | string
    storeName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    discountedPrice?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    storeChanelPlatformStoreId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type ProductsListRelationFilter = {
    every?: ProductsWhereInput
    some?: ProductsWhereInput
    none?: ProductsWhereInput
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StoreChanelCountOrderByAggregateInput = {
    platformStoreId?: SortOrder
    createdAt?: SortOrder
    phone?: SortOrder
    city?: SortOrder
    priceLevel?: SortOrder
    rating?: SortOrder
    platformStoreName?: SortOrder
    platformStoreDescription?: SortOrder
    platformStoreAdress?: SortOrder
    platformStoreUrl?: SortOrder
    note?: SortOrder
    requestToGoogleMaps?: SortOrder
  }

  export type StoreChanelAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type StoreChanelMaxOrderByAggregateInput = {
    platformStoreId?: SortOrder
    createdAt?: SortOrder
    phone?: SortOrder
    city?: SortOrder
    priceLevel?: SortOrder
    rating?: SortOrder
    platformStoreName?: SortOrder
    platformStoreDescription?: SortOrder
    platformStoreAdress?: SortOrder
    platformStoreUrl?: SortOrder
    note?: SortOrder
    requestToGoogleMaps?: SortOrder
  }

  export type StoreChanelMinOrderByAggregateInput = {
    platformStoreId?: SortOrder
    createdAt?: SortOrder
    phone?: SortOrder
    city?: SortOrder
    priceLevel?: SortOrder
    rating?: SortOrder
    platformStoreName?: SortOrder
    platformStoreDescription?: SortOrder
    platformStoreAdress?: SortOrder
    platformStoreUrl?: SortOrder
    note?: SortOrder
    requestToGoogleMaps?: SortOrder
  }

  export type StoreChanelSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type StoreChanelRelationFilter = {
    is?: StoreChanelWhereInput | null
    isNot?: StoreChanelWhereInput | null
  }

  export type ReviewCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    platformReviewId?: SortOrder
    ratingValue?: SortOrder
    review?: SortOrder
    reviewerId?: SortOrder
    reviewerAvatar?: SortOrder
    reviewerFirstName?: SortOrder
    reviewerLastName?: SortOrder
    reviewerCount?: SortOrder
    userId?: SortOrder
    storeChanelPlatformStoreId?: SortOrder
  }

  export type ReviewAvgOrderByAggregateInput = {
    id?: SortOrder
    ratingValue?: SortOrder
    reviewerCount?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    platformReviewId?: SortOrder
    ratingValue?: SortOrder
    review?: SortOrder
    reviewerId?: SortOrder
    reviewerAvatar?: SortOrder
    reviewerFirstName?: SortOrder
    reviewerLastName?: SortOrder
    reviewerCount?: SortOrder
    userId?: SortOrder
    storeChanelPlatformStoreId?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    platformReviewId?: SortOrder
    ratingValue?: SortOrder
    review?: SortOrder
    reviewerId?: SortOrder
    reviewerAvatar?: SortOrder
    reviewerFirstName?: SortOrder
    reviewerLastName?: SortOrder
    reviewerCount?: SortOrder
    userId?: SortOrder
    storeChanelPlatformStoreId?: SortOrder
  }

  export type ReviewSumOrderByAggregateInput = {
    id?: SortOrder
    ratingValue?: SortOrder
    reviewerCount?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type ProductsCountOrderByAggregateInput = {
    id?: SortOrder
    platformProductId?: SortOrder
    storeName?: SortOrder
    category?: SortOrder
    name?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    currency?: SortOrder
    price?: SortOrder
    discountedPrice?: SortOrder
    productId?: SortOrder
    storeChanelPlatformStoreId?: SortOrder
  }

  export type ProductsAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    discountedPrice?: SortOrder
    productId?: SortOrder
  }

  export type ProductsMaxOrderByAggregateInput = {
    id?: SortOrder
    platformProductId?: SortOrder
    storeName?: SortOrder
    category?: SortOrder
    name?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    currency?: SortOrder
    price?: SortOrder
    discountedPrice?: SortOrder
    productId?: SortOrder
    storeChanelPlatformStoreId?: SortOrder
  }

  export type ProductsMinOrderByAggregateInput = {
    id?: SortOrder
    platformProductId?: SortOrder
    storeName?: SortOrder
    category?: SortOrder
    name?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    currency?: SortOrder
    price?: SortOrder
    discountedPrice?: SortOrder
    productId?: SortOrder
    storeChanelPlatformStoreId?: SortOrder
  }

  export type ProductsSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    discountedPrice?: SortOrder
    productId?: SortOrder
  }

  export type ReviewCreateNestedManyWithoutStoreChanelInput = {
    create?: XOR<Enumerable<ReviewCreateWithoutStoreChanelInput>, Enumerable<ReviewUncheckedCreateWithoutStoreChanelInput>>
    connectOrCreate?: Enumerable<ReviewCreateOrConnectWithoutStoreChanelInput>
    createMany?: ReviewCreateManyStoreChanelInputEnvelope
    connect?: Enumerable<ReviewWhereUniqueInput>
  }

  export type ProductsCreateNestedManyWithoutStoreChanelInput = {
    create?: XOR<Enumerable<ProductsCreateWithoutStoreChanelInput>, Enumerable<ProductsUncheckedCreateWithoutStoreChanelInput>>
    connectOrCreate?: Enumerable<ProductsCreateOrConnectWithoutStoreChanelInput>
    createMany?: ProductsCreateManyStoreChanelInputEnvelope
    connect?: Enumerable<ProductsWhereUniqueInput>
  }

  export type ReviewUncheckedCreateNestedManyWithoutStoreChanelInput = {
    create?: XOR<Enumerable<ReviewCreateWithoutStoreChanelInput>, Enumerable<ReviewUncheckedCreateWithoutStoreChanelInput>>
    connectOrCreate?: Enumerable<ReviewCreateOrConnectWithoutStoreChanelInput>
    createMany?: ReviewCreateManyStoreChanelInputEnvelope
    connect?: Enumerable<ReviewWhereUniqueInput>
  }

  export type ProductsUncheckedCreateNestedManyWithoutStoreChanelInput = {
    create?: XOR<Enumerable<ProductsCreateWithoutStoreChanelInput>, Enumerable<ProductsUncheckedCreateWithoutStoreChanelInput>>
    connectOrCreate?: Enumerable<ProductsCreateOrConnectWithoutStoreChanelInput>
    createMany?: ProductsCreateManyStoreChanelInputEnvelope
    connect?: Enumerable<ProductsWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type ReviewUpdateManyWithoutStoreChanelInput = {
    create?: XOR<Enumerable<ReviewCreateWithoutStoreChanelInput>, Enumerable<ReviewUncheckedCreateWithoutStoreChanelInput>>
    connectOrCreate?: Enumerable<ReviewCreateOrConnectWithoutStoreChanelInput>
    upsert?: Enumerable<ReviewUpsertWithWhereUniqueWithoutStoreChanelInput>
    createMany?: ReviewCreateManyStoreChanelInputEnvelope
    set?: Enumerable<ReviewWhereUniqueInput>
    disconnect?: Enumerable<ReviewWhereUniqueInput>
    delete?: Enumerable<ReviewWhereUniqueInput>
    connect?: Enumerable<ReviewWhereUniqueInput>
    update?: Enumerable<ReviewUpdateWithWhereUniqueWithoutStoreChanelInput>
    updateMany?: Enumerable<ReviewUpdateManyWithWhereWithoutStoreChanelInput>
    deleteMany?: Enumerable<ReviewScalarWhereInput>
  }

  export type ProductsUpdateManyWithoutStoreChanelInput = {
    create?: XOR<Enumerable<ProductsCreateWithoutStoreChanelInput>, Enumerable<ProductsUncheckedCreateWithoutStoreChanelInput>>
    connectOrCreate?: Enumerable<ProductsCreateOrConnectWithoutStoreChanelInput>
    upsert?: Enumerable<ProductsUpsertWithWhereUniqueWithoutStoreChanelInput>
    createMany?: ProductsCreateManyStoreChanelInputEnvelope
    set?: Enumerable<ProductsWhereUniqueInput>
    disconnect?: Enumerable<ProductsWhereUniqueInput>
    delete?: Enumerable<ProductsWhereUniqueInput>
    connect?: Enumerable<ProductsWhereUniqueInput>
    update?: Enumerable<ProductsUpdateWithWhereUniqueWithoutStoreChanelInput>
    updateMany?: Enumerable<ProductsUpdateManyWithWhereWithoutStoreChanelInput>
    deleteMany?: Enumerable<ProductsScalarWhereInput>
  }

  export type ReviewUncheckedUpdateManyWithoutStoreChanelInput = {
    create?: XOR<Enumerable<ReviewCreateWithoutStoreChanelInput>, Enumerable<ReviewUncheckedCreateWithoutStoreChanelInput>>
    connectOrCreate?: Enumerable<ReviewCreateOrConnectWithoutStoreChanelInput>
    upsert?: Enumerable<ReviewUpsertWithWhereUniqueWithoutStoreChanelInput>
    createMany?: ReviewCreateManyStoreChanelInputEnvelope
    set?: Enumerable<ReviewWhereUniqueInput>
    disconnect?: Enumerable<ReviewWhereUniqueInput>
    delete?: Enumerable<ReviewWhereUniqueInput>
    connect?: Enumerable<ReviewWhereUniqueInput>
    update?: Enumerable<ReviewUpdateWithWhereUniqueWithoutStoreChanelInput>
    updateMany?: Enumerable<ReviewUpdateManyWithWhereWithoutStoreChanelInput>
    deleteMany?: Enumerable<ReviewScalarWhereInput>
  }

  export type ProductsUncheckedUpdateManyWithoutStoreChanelInput = {
    create?: XOR<Enumerable<ProductsCreateWithoutStoreChanelInput>, Enumerable<ProductsUncheckedCreateWithoutStoreChanelInput>>
    connectOrCreate?: Enumerable<ProductsCreateOrConnectWithoutStoreChanelInput>
    upsert?: Enumerable<ProductsUpsertWithWhereUniqueWithoutStoreChanelInput>
    createMany?: ProductsCreateManyStoreChanelInputEnvelope
    set?: Enumerable<ProductsWhereUniqueInput>
    disconnect?: Enumerable<ProductsWhereUniqueInput>
    delete?: Enumerable<ProductsWhereUniqueInput>
    connect?: Enumerable<ProductsWhereUniqueInput>
    update?: Enumerable<ProductsUpdateWithWhereUniqueWithoutStoreChanelInput>
    updateMany?: Enumerable<ProductsUpdateManyWithWhereWithoutStoreChanelInput>
    deleteMany?: Enumerable<ProductsScalarWhereInput>
  }

  export type StoreChanelCreateNestedOneWithoutReviewInput = {
    create?: XOR<StoreChanelCreateWithoutReviewInput, StoreChanelUncheckedCreateWithoutReviewInput>
    connectOrCreate?: StoreChanelCreateOrConnectWithoutReviewInput
    connect?: StoreChanelWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StoreChanelUpdateOneWithoutReviewInput = {
    create?: XOR<StoreChanelCreateWithoutReviewInput, StoreChanelUncheckedCreateWithoutReviewInput>
    connectOrCreate?: StoreChanelCreateOrConnectWithoutReviewInput
    upsert?: StoreChanelUpsertWithoutReviewInput
    disconnect?: boolean
    delete?: boolean
    connect?: StoreChanelWhereUniqueInput
    update?: XOR<StoreChanelUpdateWithoutReviewInput, StoreChanelUncheckedUpdateWithoutReviewInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StoreChanelCreateNestedOneWithoutProductsInput = {
    create?: XOR<StoreChanelCreateWithoutProductsInput, StoreChanelUncheckedCreateWithoutProductsInput>
    connectOrCreate?: StoreChanelCreateOrConnectWithoutProductsInput
    connect?: StoreChanelWhereUniqueInput
  }

  export type StoreChanelUpdateOneWithoutProductsInput = {
    create?: XOR<StoreChanelCreateWithoutProductsInput, StoreChanelUncheckedCreateWithoutProductsInput>
    connectOrCreate?: StoreChanelCreateOrConnectWithoutProductsInput
    upsert?: StoreChanelUpsertWithoutProductsInput
    disconnect?: boolean
    delete?: boolean
    connect?: StoreChanelWhereUniqueInput
    update?: XOR<StoreChanelUpdateWithoutProductsInput, StoreChanelUncheckedUpdateWithoutProductsInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type ReviewCreateWithoutStoreChanelInput = {
    date?: Date | string | null
    platformReviewId?: string | null
    ratingValue?: number | null
    review?: string | null
    reviewerId?: string | null
    reviewerAvatar?: string | null
    reviewerFirstName?: string | null
    reviewerLastName?: string | null
    reviewerCount?: number | null
    userId?: string | null
  }

  export type ReviewUncheckedCreateWithoutStoreChanelInput = {
    id?: number
    date?: Date | string | null
    platformReviewId?: string | null
    ratingValue?: number | null
    review?: string | null
    reviewerId?: string | null
    reviewerAvatar?: string | null
    reviewerFirstName?: string | null
    reviewerLastName?: string | null
    reviewerCount?: number | null
    userId?: string | null
  }

  export type ReviewCreateOrConnectWithoutStoreChanelInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutStoreChanelInput, ReviewUncheckedCreateWithoutStoreChanelInput>
  }

  export type ReviewCreateManyStoreChanelInputEnvelope = {
    data: Enumerable<ReviewCreateManyStoreChanelInput>
    skipDuplicates?: boolean
  }

  export type ProductsCreateWithoutStoreChanelInput = {
    platformProductId: string
    storeName: string
    category: string
    name: string
    description: string
    imageUrl: string
    currency: string
    price: number
    discountedPrice: number
    productId: number
  }

  export type ProductsUncheckedCreateWithoutStoreChanelInput = {
    id?: number
    platformProductId: string
    storeName: string
    category: string
    name: string
    description: string
    imageUrl: string
    currency: string
    price: number
    discountedPrice: number
    productId: number
  }

  export type ProductsCreateOrConnectWithoutStoreChanelInput = {
    where: ProductsWhereUniqueInput
    create: XOR<ProductsCreateWithoutStoreChanelInput, ProductsUncheckedCreateWithoutStoreChanelInput>
  }

  export type ProductsCreateManyStoreChanelInputEnvelope = {
    data: Enumerable<ProductsCreateManyStoreChanelInput>
    skipDuplicates?: boolean
  }

  export type ReviewUpsertWithWhereUniqueWithoutStoreChanelInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutStoreChanelInput, ReviewUncheckedUpdateWithoutStoreChanelInput>
    create: XOR<ReviewCreateWithoutStoreChanelInput, ReviewUncheckedCreateWithoutStoreChanelInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutStoreChanelInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutStoreChanelInput, ReviewUncheckedUpdateWithoutStoreChanelInput>
  }

  export type ReviewUpdateManyWithWhereWithoutStoreChanelInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutReviewInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: Enumerable<ReviewScalarWhereInput>
    OR?: Enumerable<ReviewScalarWhereInput>
    NOT?: Enumerable<ReviewScalarWhereInput>
    id?: IntFilter | number
    date?: DateTimeNullableFilter | Date | string | null
    platformReviewId?: StringNullableFilter | string | null
    ratingValue?: FloatNullableFilter | number | null
    review?: StringNullableFilter | string | null
    reviewerId?: StringNullableFilter | string | null
    reviewerAvatar?: StringNullableFilter | string | null
    reviewerFirstName?: StringNullableFilter | string | null
    reviewerLastName?: StringNullableFilter | string | null
    reviewerCount?: IntNullableFilter | number | null
    userId?: StringNullableFilter | string | null
    storeChanelPlatformStoreId?: StringNullableFilter | string | null
  }

  export type ProductsUpsertWithWhereUniqueWithoutStoreChanelInput = {
    where: ProductsWhereUniqueInput
    update: XOR<ProductsUpdateWithoutStoreChanelInput, ProductsUncheckedUpdateWithoutStoreChanelInput>
    create: XOR<ProductsCreateWithoutStoreChanelInput, ProductsUncheckedCreateWithoutStoreChanelInput>
  }

  export type ProductsUpdateWithWhereUniqueWithoutStoreChanelInput = {
    where: ProductsWhereUniqueInput
    data: XOR<ProductsUpdateWithoutStoreChanelInput, ProductsUncheckedUpdateWithoutStoreChanelInput>
  }

  export type ProductsUpdateManyWithWhereWithoutStoreChanelInput = {
    where: ProductsScalarWhereInput
    data: XOR<ProductsUpdateManyMutationInput, ProductsUncheckedUpdateManyWithoutProductsInput>
  }

  export type ProductsScalarWhereInput = {
    AND?: Enumerable<ProductsScalarWhereInput>
    OR?: Enumerable<ProductsScalarWhereInput>
    NOT?: Enumerable<ProductsScalarWhereInput>
    id?: IntFilter | number
    platformProductId?: StringFilter | string
    storeName?: StringFilter | string
    category?: StringFilter | string
    name?: StringFilter | string
    description?: StringFilter | string
    imageUrl?: StringFilter | string
    currency?: StringFilter | string
    price?: IntFilter | number
    discountedPrice?: IntFilter | number
    productId?: IntFilter | number
    storeChanelPlatformStoreId?: StringNullableFilter | string | null
  }

  export type StoreChanelCreateWithoutReviewInput = {
    platformStoreId: string
    createdAt?: Date | string
    phone?: string | null
    city?: string | null
    priceLevel?: string | null
    rating?: number | null
    platformStoreName?: string | null
    platformStoreDescription?: string | null
    platformStoreAdress?: string | null
    platformStoreUrl?: string | null
    note?: string | null
    requestToGoogleMaps?: boolean | null
    Products?: ProductsCreateNestedManyWithoutStoreChanelInput
  }

  export type StoreChanelUncheckedCreateWithoutReviewInput = {
    platformStoreId: string
    createdAt?: Date | string
    phone?: string | null
    city?: string | null
    priceLevel?: string | null
    rating?: number | null
    platformStoreName?: string | null
    platformStoreDescription?: string | null
    platformStoreAdress?: string | null
    platformStoreUrl?: string | null
    note?: string | null
    requestToGoogleMaps?: boolean | null
    Products?: ProductsUncheckedCreateNestedManyWithoutStoreChanelInput
  }

  export type StoreChanelCreateOrConnectWithoutReviewInput = {
    where: StoreChanelWhereUniqueInput
    create: XOR<StoreChanelCreateWithoutReviewInput, StoreChanelUncheckedCreateWithoutReviewInput>
  }

  export type StoreChanelUpsertWithoutReviewInput = {
    update: XOR<StoreChanelUpdateWithoutReviewInput, StoreChanelUncheckedUpdateWithoutReviewInput>
    create: XOR<StoreChanelCreateWithoutReviewInput, StoreChanelUncheckedCreateWithoutReviewInput>
  }

  export type StoreChanelUpdateWithoutReviewInput = {
    platformStoreId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    priceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    platformStoreName?: NullableStringFieldUpdateOperationsInput | string | null
    platformStoreDescription?: NullableStringFieldUpdateOperationsInput | string | null
    platformStoreAdress?: NullableStringFieldUpdateOperationsInput | string | null
    platformStoreUrl?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    requestToGoogleMaps?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Products?: ProductsUpdateManyWithoutStoreChanelInput
  }

  export type StoreChanelUncheckedUpdateWithoutReviewInput = {
    platformStoreId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    priceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    platformStoreName?: NullableStringFieldUpdateOperationsInput | string | null
    platformStoreDescription?: NullableStringFieldUpdateOperationsInput | string | null
    platformStoreAdress?: NullableStringFieldUpdateOperationsInput | string | null
    platformStoreUrl?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    requestToGoogleMaps?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Products?: ProductsUncheckedUpdateManyWithoutStoreChanelInput
  }

  export type StoreChanelCreateWithoutProductsInput = {
    platformStoreId: string
    createdAt?: Date | string
    phone?: string | null
    city?: string | null
    priceLevel?: string | null
    rating?: number | null
    platformStoreName?: string | null
    platformStoreDescription?: string | null
    platformStoreAdress?: string | null
    platformStoreUrl?: string | null
    note?: string | null
    requestToGoogleMaps?: boolean | null
    review?: ReviewCreateNestedManyWithoutStoreChanelInput
  }

  export type StoreChanelUncheckedCreateWithoutProductsInput = {
    platformStoreId: string
    createdAt?: Date | string
    phone?: string | null
    city?: string | null
    priceLevel?: string | null
    rating?: number | null
    platformStoreName?: string | null
    platformStoreDescription?: string | null
    platformStoreAdress?: string | null
    platformStoreUrl?: string | null
    note?: string | null
    requestToGoogleMaps?: boolean | null
    review?: ReviewUncheckedCreateNestedManyWithoutStoreChanelInput
  }

  export type StoreChanelCreateOrConnectWithoutProductsInput = {
    where: StoreChanelWhereUniqueInput
    create: XOR<StoreChanelCreateWithoutProductsInput, StoreChanelUncheckedCreateWithoutProductsInput>
  }

  export type StoreChanelUpsertWithoutProductsInput = {
    update: XOR<StoreChanelUpdateWithoutProductsInput, StoreChanelUncheckedUpdateWithoutProductsInput>
    create: XOR<StoreChanelCreateWithoutProductsInput, StoreChanelUncheckedCreateWithoutProductsInput>
  }

  export type StoreChanelUpdateWithoutProductsInput = {
    platformStoreId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    priceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    platformStoreName?: NullableStringFieldUpdateOperationsInput | string | null
    platformStoreDescription?: NullableStringFieldUpdateOperationsInput | string | null
    platformStoreAdress?: NullableStringFieldUpdateOperationsInput | string | null
    platformStoreUrl?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    requestToGoogleMaps?: NullableBoolFieldUpdateOperationsInput | boolean | null
    review?: ReviewUpdateManyWithoutStoreChanelInput
  }

  export type StoreChanelUncheckedUpdateWithoutProductsInput = {
    platformStoreId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    priceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    platformStoreName?: NullableStringFieldUpdateOperationsInput | string | null
    platformStoreDescription?: NullableStringFieldUpdateOperationsInput | string | null
    platformStoreAdress?: NullableStringFieldUpdateOperationsInput | string | null
    platformStoreUrl?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    requestToGoogleMaps?: NullableBoolFieldUpdateOperationsInput | boolean | null
    review?: ReviewUncheckedUpdateManyWithoutStoreChanelInput
  }

  export type ReviewCreateManyStoreChanelInput = {
    id?: number
    date?: Date | string | null
    platformReviewId?: string | null
    ratingValue?: number | null
    review?: string | null
    reviewerId?: string | null
    reviewerAvatar?: string | null
    reviewerFirstName?: string | null
    reviewerLastName?: string | null
    reviewerCount?: number | null
    userId?: string | null
  }

  export type ProductsCreateManyStoreChanelInput = {
    id?: number
    platformProductId: string
    storeName: string
    category: string
    name: string
    description: string
    imageUrl: string
    currency: string
    price: number
    discountedPrice: number
    productId: number
  }

  export type ReviewUpdateWithoutStoreChanelInput = {
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platformReviewId?: NullableStringFieldUpdateOperationsInput | string | null
    ratingValue?: NullableFloatFieldUpdateOperationsInput | number | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerFirstName?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerLastName?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerCount?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewUncheckedUpdateWithoutStoreChanelInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platformReviewId?: NullableStringFieldUpdateOperationsInput | string | null
    ratingValue?: NullableFloatFieldUpdateOperationsInput | number | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerFirstName?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerLastName?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerCount?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewUncheckedUpdateManyWithoutReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    platformReviewId?: NullableStringFieldUpdateOperationsInput | string | null
    ratingValue?: NullableFloatFieldUpdateOperationsInput | number | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerAvatar?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerFirstName?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerLastName?: NullableStringFieldUpdateOperationsInput | string | null
    reviewerCount?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductsUpdateWithoutStoreChanelInput = {
    platformProductId?: StringFieldUpdateOperationsInput | string
    storeName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    discountedPrice?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
  }

  export type ProductsUncheckedUpdateWithoutStoreChanelInput = {
    id?: IntFieldUpdateOperationsInput | number
    platformProductId?: StringFieldUpdateOperationsInput | string
    storeName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    discountedPrice?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
  }

  export type ProductsUncheckedUpdateManyWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    platformProductId?: StringFieldUpdateOperationsInput | string
    storeName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    discountedPrice?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}